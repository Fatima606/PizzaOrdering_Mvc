// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PizzaOrdering_Mvc.PizzaApp_DbContext;

#nullable disable

namespace PizzaOrdering_Mvc.Migrations
{
    [DbContext(typeof(PizzaAppDbContext))]
    [Migration("20240725060632_field_added_in_Order")]
    partial class field_added_in_Order
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PizzaOrdering_Mvc.Models.Base", b =>
                {
                    b.Property<Guid>("baseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BaseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("baseId");

                    b.ToTable("Base");

                    b.HasData(
                        new
                        {
                            baseId = new Guid("c153bc56-c45d-4eeb-a4cf-ad34a75cd7d0"),
                            BaseName = "Thick"
                        },
                        new
                        {
                            baseId = new Guid("35232165-19b5-41c3-a904-0ec72be37c88"),
                            BaseName = "Thin"
                        });
                });

            modelBuilder.Entity("PizzaOrdering_Mvc.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PizzaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("no_times_ordered")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("PizzaId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("PizzaOrdering_Mvc.Models.Pizza", b =>
                {
                    b.Property<Guid>("PizzaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PizzaId");

                    b.HasIndex("BaseId");

                    b.HasIndex("SizeId");

                    b.ToTable("Pizza");
                });

            modelBuilder.Entity("PizzaOrdering_Mvc.Models.PizzaTopping", b =>
                {
                    b.Property<Guid>("PizzaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToppingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PizzaId", "ToppingId");

                    b.HasIndex("ToppingId");

                    b.ToTable("PizzaTopping");
                });

            modelBuilder.Entity("PizzaOrdering_Mvc.Models.Size", b =>
                {
                    b.Property<Guid>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PizzaSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SizeId");

                    b.ToTable("Size");

                    b.HasData(
                        new
                        {
                            SizeId = new Guid("89b392ec-2007-4187-bd1e-b63c6f8d8cfe"),
                            PizzaSize = "Large"
                        },
                        new
                        {
                            SizeId = new Guid("e78de39d-7f5a-4ba4-90c2-63f2eb9fc9e5"),
                            PizzaSize = "Medium"
                        },
                        new
                        {
                            SizeId = new Guid("9c85e049-b0ac-4fad-97a7-fdfda3ac1781"),
                            PizzaSize = "Small"
                        });
                });

            modelBuilder.Entity("PizzaOrdering_Mvc.Models.Toppings", b =>
                {
                    b.Property<Guid>("ToppingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToppingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ToppingId");

                    b.ToTable("Toppings");

                    b.HasData(
                        new
                        {
                            ToppingId = new Guid("0a421f62-bd57-4eed-9118-8206a6b67283"),
                            ToppingName = "Chicken"
                        },
                        new
                        {
                            ToppingId = new Guid("6f547df3-b2a7-41a4-9ef5-9efc02c9fe31"),
                            ToppingName = "Pepperoni"
                        },
                        new
                        {
                            ToppingId = new Guid("5a665776-d01b-437c-9a70-9f7dc12df558"),
                            ToppingName = "Extra Chaeese"
                        },
                        new
                        {
                            ToppingId = new Guid("dbeb07ad-455a-4fff-a116-cf6df1c1e1bd"),
                            ToppingName = "Mushroom"
                        },
                        new
                        {
                            ToppingId = new Guid("40e8d015-76f2-4431-ba65-4db323a36001"),
                            ToppingName = "Spinach"
                        },
                        new
                        {
                            ToppingId = new Guid("af84bf79-9d2b-45ca-8b0e-f0f726e483f8"),
                            ToppingName = "Olives"
                        });
                });

            modelBuilder.Entity("PizzaOrdering_Mvc.Models.Order", b =>
                {
                    b.HasOne("PizzaOrdering_Mvc.Models.Pizza", "Pizza")
                        .WithMany()
                        .HasForeignKey("PizzaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pizza");
                });

            modelBuilder.Entity("PizzaOrdering_Mvc.Models.Pizza", b =>
                {
                    b.HasOne("PizzaOrdering_Mvc.Models.Base", "_base")
                        .WithMany()
                        .HasForeignKey("BaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PizzaOrdering_Mvc.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Size");

                    b.Navigation("_base");
                });

            modelBuilder.Entity("PizzaOrdering_Mvc.Models.PizzaTopping", b =>
                {
                    b.HasOne("PizzaOrdering_Mvc.Models.Pizza", "Pizza")
                        .WithMany()
                        .HasForeignKey("PizzaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PizzaOrdering_Mvc.Models.Toppings", "Topping")
                        .WithMany()
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pizza");

                    b.Navigation("Topping");
                });
#pragma warning restore 612, 618
        }
    }
}
