// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PizzaOrdering_Mvc.PizzaApp_DbContext;

#nullable disable

namespace PizzaOrdering_Mvc.Migrations
{
    [DbContext(typeof(PizzaAppDbContext))]
    [Migration("20240725061637_field_removed_in_Order")]
    partial class field_removed_in_Order
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PizzaOrdering_Mvc.Models.Base", b =>
                {
                    b.Property<Guid>("baseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BaseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("baseId");

                    b.ToTable("Base");

                    b.HasData(
                        new
                        {
                            baseId = new Guid("cfe0ec73-0c8a-4653-932b-4189622281a4"),
                            BaseName = "Thick"
                        },
                        new
                        {
                            baseId = new Guid("4c97f9e8-30c2-4ef3-b152-9600438300c2"),
                            BaseName = "Thin"
                        });
                });

            modelBuilder.Entity("PizzaOrdering_Mvc.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PizzaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderId");

                    b.HasIndex("PizzaId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("PizzaOrdering_Mvc.Models.Pizza", b =>
                {
                    b.Property<Guid>("PizzaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PizzaId");

                    b.HasIndex("BaseId");

                    b.HasIndex("SizeId");

                    b.ToTable("Pizza");
                });

            modelBuilder.Entity("PizzaOrdering_Mvc.Models.PizzaTopping", b =>
                {
                    b.Property<Guid>("PizzaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToppingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PizzaId", "ToppingId");

                    b.HasIndex("ToppingId");

                    b.ToTable("PizzaTopping");
                });

            modelBuilder.Entity("PizzaOrdering_Mvc.Models.Size", b =>
                {
                    b.Property<Guid>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PizzaSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SizeId");

                    b.ToTable("Size");

                    b.HasData(
                        new
                        {
                            SizeId = new Guid("e75924ba-0967-4b2c-87c7-991b56c65f69"),
                            PizzaSize = "Large"
                        },
                        new
                        {
                            SizeId = new Guid("eb7151bf-1c5d-4c52-b34e-023a52ab9b6f"),
                            PizzaSize = "Medium"
                        },
                        new
                        {
                            SizeId = new Guid("64012bcd-d71a-45f3-aab0-72d1ca386d77"),
                            PizzaSize = "Small"
                        });
                });

            modelBuilder.Entity("PizzaOrdering_Mvc.Models.Toppings", b =>
                {
                    b.Property<Guid>("ToppingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToppingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ToppingId");

                    b.ToTable("Toppings");

                    b.HasData(
                        new
                        {
                            ToppingId = new Guid("5fa3366f-c816-4c89-85a7-cfde8b1047cb"),
                            ToppingName = "Chicken"
                        },
                        new
                        {
                            ToppingId = new Guid("f46673ab-4bbd-4151-9d79-6735416897f5"),
                            ToppingName = "Pepperoni"
                        },
                        new
                        {
                            ToppingId = new Guid("c96e7ccd-f2ed-4551-9adf-b450f9edd276"),
                            ToppingName = "Extra Chaeese"
                        },
                        new
                        {
                            ToppingId = new Guid("22b16462-0a68-42dc-bf52-b6c0f1dfd0ae"),
                            ToppingName = "Mushroom"
                        },
                        new
                        {
                            ToppingId = new Guid("692df90b-65b0-4a0b-8249-c1eff6c11e76"),
                            ToppingName = "Spinach"
                        },
                        new
                        {
                            ToppingId = new Guid("d46eb57f-c9ea-4b49-ab28-c1116974c985"),
                            ToppingName = "Olives"
                        });
                });

            modelBuilder.Entity("PizzaOrdering_Mvc.Models.Order", b =>
                {
                    b.HasOne("PizzaOrdering_Mvc.Models.Pizza", "Pizza")
                        .WithMany()
                        .HasForeignKey("PizzaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pizza");
                });

            modelBuilder.Entity("PizzaOrdering_Mvc.Models.Pizza", b =>
                {
                    b.HasOne("PizzaOrdering_Mvc.Models.Base", "_base")
                        .WithMany()
                        .HasForeignKey("BaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PizzaOrdering_Mvc.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Size");

                    b.Navigation("_base");
                });

            modelBuilder.Entity("PizzaOrdering_Mvc.Models.PizzaTopping", b =>
                {
                    b.HasOne("PizzaOrdering_Mvc.Models.Pizza", "Pizza")
                        .WithMany()
                        .HasForeignKey("PizzaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PizzaOrdering_Mvc.Models.Toppings", "Topping")
                        .WithMany()
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pizza");

                    b.Navigation("Topping");
                });
#pragma warning restore 612, 618
        }
    }
}
